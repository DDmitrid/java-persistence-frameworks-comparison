/**
 * This class is generated by jOOQ
 */
package com.clevergang.dbtests.service.repository.impl.jooq.generated.tables;


import com.clevergang.dbtests.service.repository.impl.jooq.generated.Keys;
import com.clevergang.dbtests.service.repository.impl.jooq.generated.Public;
import com.clevergang.dbtests.service.repository.impl.jooq.generated.tables.records.EmployeeDepartmentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDepartment extends TableImpl<EmployeeDepartmentRecord> {

	private static final long serialVersionUID = -1275068213;

	/**
	 * The reference instance of <code>public.employee_department</code>
	 */
	public static final EmployeeDepartment EMPLOYEE_DEPARTMENT = new EmployeeDepartment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EmployeeDepartmentRecord> getRecordType() {
		return EmployeeDepartmentRecord.class;
	}

	/**
	 * The column <code>public.employee_department.employee_pid</code>.
	 */
	public final TableField<EmployeeDepartmentRecord, Integer> EMPLOYEE_PID = createField("employee_pid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.employee_department.department_pid</code>.
	 */
	public final TableField<EmployeeDepartmentRecord, Integer> DEPARTMENT_PID = createField("department_pid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>public.employee_department</code> table reference
	 */
	public EmployeeDepartment() {
		this("employee_department", null);
	}

	/**
	 * Create an aliased <code>public.employee_department</code> table reference
	 */
	public EmployeeDepartment(String alias) {
		this(alias, EMPLOYEE_DEPARTMENT);
	}

	private EmployeeDepartment(String alias, Table<EmployeeDepartmentRecord> aliased) {
		this(alias, aliased, null);
	}

	private EmployeeDepartment(String alias, Table<EmployeeDepartmentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<EmployeeDepartmentRecord>> getKeys() {
		return Arrays.<UniqueKey<EmployeeDepartmentRecord>>asList(Keys.EMPLOYEE_DEPARTMENT_EMPLOYEE_PID_DEPARTMENT_PID_KEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<EmployeeDepartmentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<EmployeeDepartmentRecord, ?>>asList(Keys.EMPLOYEE_DEPARTMENT__EMPLOYEE_DEPARTMENT_EMPLOYEE_PID_FKEY, Keys.EMPLOYEE_DEPARTMENT__EMPLOYEE_DEPARTMENT_DEPARTMENT_PID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public EmployeeDepartment as(String alias) {
		return new EmployeeDepartment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public EmployeeDepartment rename(String name) {
		return new EmployeeDepartment(name, null);
	}
}
