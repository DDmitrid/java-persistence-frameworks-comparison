// You can invoke JOOQ code generation using this script.
// Just run it from IDE, or use "gradle --rerun-tasks -b jooq.gradle"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "nu.studer:gradle-jooq-plugin:2.0.2"  // to allow jooq gradle plugin
    }
}

apply plugin: 'nu.studer.jooq'  // see details in https://github.com/etiennestuder/gradle-jooq-plugin
apply plugin: 'java'

defaultTasks 'generateDbTestsApplicationJooqSchemaSource'

repositories {
    jcenter()
}

group = 'com.clevergang'
version = '1.0.0'

repositories {
    jcenter()
}

// We need Java8 for this project
tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
}

dependencies {
    jooqRuntime "org.postgresql:postgresql:9.4.1211.jre7"
}

// jooq configuration
jooq {
    version = '3.8.4'
    edition = 'OSS'   // the default (can be omitted), other allowed values are PRO, PRO_JAVA_6, and TRIAL
    DbTestsApplication(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/testdb'
            user = 'test'
            password = 'test'
            schema = 'public'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
            }
            target {
                packageName = 'com.clevergang.dbtests.repository.impl.jooq.generated'
                directory = './src/main/java/'
            }
        }
    }
}

