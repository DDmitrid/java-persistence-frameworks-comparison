<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.clevergang</groupId>
    <artifactId>java-repo-layer-comparison</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>java-repo-layer-comparison</name>
    <description>Comparison of non-JPA SQL mapping frameworks for Java (Jooq, Spring JDBCTemplate etc.)</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.4-1201-jdbc41</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!-- You can use this plugin to generate classes needed by Jooq -->
            <!-- Just run it using 'mvn jooq-codegen:generate' -->
            <!-- Generated classes will go to  ./src/main/java/com/clevergang/dbtests/service/repository/impl/jooq/generated -->
            <plugin>

                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.7.2</version>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL database -->
                <dependencies>
                    <dependency>
                        <groupId>org.postgresql</groupId>
                        <artifactId>postgresql</artifactId>
                        <version>9.4-1201-jdbc41</version>
                    </dependency>
                </dependencies>

                <!-- Specify the plugin configuration.
                     The configuration format is the same as for the standalone code generator -->
                <configuration>
                    <!-- Configure the database connection here -->
                    <jdbc>
                        <driver>org.postgresql.Driver</driver>
                        <url>jdbc:postgresql://localhost:5432/testdb</url>
                        <user>test</user>
                        <password>test</password>
                    </jdbc>

                    <generator>
                        <!-- The default code generator. You can override this one, to generate your own code style.
                             Supported generators:
                             - org.jooq.util.JavaGenerator
                             - org.jooq.util.ScalaGenerator
                             Defaults to org.jooq.util.JavaGenerator -->
                        <name>org.jooq.util.JavaGenerator</name>

                        <database>
                            <!-- The database type. The format here is:
                                 org.util.[database].[database]Database -->
                            <name>org.jooq.util.postgres.PostgresDatabase</name>

                            <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                 can be the owner, user, database name) to be generated -->
                            <inputSchema>public</inputSchema>

                            <!-- All elements that are generated from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions)
                                 Watch out for case-sensitivity. Depending on your database, this might be important! -->
                            <includes>.*</includes>

                            <!-- All elements that are excluded from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions).
                                 Excludes match before includes -->
                            <!--<excludes></excludes>-->
                        </database>

                        <target>
                            <!-- The destination package of your generated classes (within the destination directory) -->
                            <packageName>com.clevergang.dbtests.service.repository.impl.jooq.generated</packageName>

                            <!-- The destination directory of your generated classes -->
                            <directory>./src/main/java/</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>


        </plugins>
    </build>


</project>
